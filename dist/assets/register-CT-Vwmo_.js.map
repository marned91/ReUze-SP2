{"version":3,"file":"register-CT-Vwmo_.js","sources":["../../src/script/router/views/register.mjs"],"sourcesContent":["import { handleAlert } from '../../global/handleAlerts.mjs'\nimport { register } from '../../api/auth.mjs'\n\n/**\n * Handles the user registration process.\n *\n * This function is triggered when the registration form is submitted. It collects the form data, including the user's\n * name, email, password, and avatar details, and sends it to the server for registration via the `register` function.\n * Upon successful registration, it displays a success message and redirects the user to the login page. If registration fails,\n * it displays an error message.\n *\n * @async\n * @param {Event} event - The form submission event.\n * @returns {Promise<Object>} - A promise that resolves to the response data from the registration API, or `undefined`\n * if the registration fails.\n *\n * @example\n * // Triggered when the registration form is submitted.\n * onRegister(event);\n */\nasync function onRegister(event) {\n  event.preventDefault()\n\n  const form = event.target\n  const fieldset = form.querySelector('fieldset')\n  const button = form.querySelector('button')\n  const originalButtonText = button.textContent\n\n  const formData = new FormData(form)\n\n  const name = formData.get('name')\n  const email = formData.get('email')\n  const password = formData.get('password')\n  const avatarUrl = formData.get('avatarUrl')\n  const avatarAlt = formData.get('avatarAlt')\n\n  const avatar = {\n    url: avatarUrl,\n    alt: avatarAlt,\n  }\n\n  fieldset.disabled = true\n  button.textContent = 'Registering...'\n\n  try {\n    const data = await register({ name, email, password, avatar })\n    handleAlert('Registration was successful! You can now log in.', 'success')\n    form.reset()\n    setTimeout(() => (window.location.pathname = '/auth/login/'), 2000)\n    return data\n  } catch (error) {\n    handleAlert(`Registration failed: ${error.message}`, 'error')\n  } finally {\n    fieldset.disabled = false\n    button.textContent = originalButtonText\n  }\n}\n\nconst form = document.forms.register\nform.addEventListener('submit', onRegister)\n"],"names":["onRegister","event","form","fieldset","button","originalButtonText","formData","name","email","password","avatarUrl","avatarAlt","avatar","data","register","handleAlert","error"],"mappings":"4GAoBA,eAAeA,EAAWC,EAAO,CAC/BA,EAAM,eAAc,EAEpB,MAAMC,EAAOD,EAAM,OACbE,EAAWD,EAAK,cAAc,UAAU,EACxCE,EAASF,EAAK,cAAc,QAAQ,EACpCG,EAAqBD,EAAO,YAE5BE,EAAW,IAAI,SAASJ,CAAI,EAE5BK,EAAOD,EAAS,IAAI,MAAM,EAC1BE,EAAQF,EAAS,IAAI,OAAO,EAC5BG,EAAWH,EAAS,IAAI,UAAU,EAClCI,EAAYJ,EAAS,IAAI,WAAW,EACpCK,EAAYL,EAAS,IAAI,WAAW,EAEpCM,EAAS,CACb,IAAKF,EACL,IAAKC,CACT,EAEER,EAAS,SAAW,GACpBC,EAAO,YAAc,iBAErB,GAAI,CACF,MAAMS,EAAO,MAAMC,EAAS,CAAE,KAAAP,EAAM,MAAAC,EAAO,SAAAC,EAAU,OAAAG,CAAQ,CAAA,EAC7D,OAAAG,EAAY,mDAAoD,SAAS,EACzEb,EAAK,MAAK,EACV,WAAW,IAAO,OAAO,SAAS,SAAW,eAAiB,GAAI,EAC3DW,CACR,OAAQG,EAAO,CACdD,EAAY,wBAAwBC,EAAM,OAAO,GAAI,OAAO,CAChE,QAAY,CACRb,EAAS,SAAW,GACpBC,EAAO,YAAcC,CACzB,CACA,CAEA,MAAMH,EAAO,SAAS,MAAM,SAC5BA,EAAK,iBAAiB,SAAUF,CAAU"}