{"version":3,"file":"profile-DJ92duJc.js","sources":["../../src/script/api/profile.mjs"],"sourcesContent":["import { doFetch } from '../api/doFetch.mjs'\nimport { API_AUCTION_PROFILE } from '../api/constants.mjs'\n\n/**\n * Fetches the profile details for a specified user.\n *\n * This function sends a request to the auction API to fetch the profile data for the user identified by the provided `username`.\n * If successful, the user's profile data is returned; otherwise, `null` is returned.\n *\n * @param {string} username - The username of the user whose profile data is to be fetched.\n * @returns {Promise<Object|null>} A promise that resolves to the profile data of the user, or `null` if the request fails.\n * @throws {Error} If the fetch operation encounters an issue, `null` is returned.\n *\n * @example\n * const username = \"john_doe\";\n * const profile = await fetchProfileData(username);\n * // Fetches the profile data for the user 'john_doe'.\n */\nexport async function fetchProfileData(username) {\n  try {\n    const profileData = await doFetch(`${API_AUCTION_PROFILE}/${username}`)\n    return profileData\n  } catch (error) {\n    console.error('Error fetching profile data:', error)\n    return null\n  }\n}\n\n/**\n * Fetches the listings for a specified user's profile.\n *\n * This function sends a request to the auction API to fetch the listings for the user identified by the provided `username`.\n * The listings are returned with bid information included. If the request fails, an empty array is returned.\n *\n * @param {string} username - The username of the user whose listings are to be fetched.\n * @returns {Promise<Object[]>} A promise that resolves to an array of the user's listings, or an empty array if the request fails.\n * @throws {Error} If the fetch operation encounters an issue, an empty array is returned.\n *\n * @example\n * const username = \"john_doe\";\n * const listings = await fetchProfileListings(username);\n * // Fetches the listings for the user 'john_doe'.\n */\nexport async function fetchProfileListings(username) {\n  try {\n    const listings = await doFetch(\n      `${API_AUCTION_PROFILE}/${username}/listings?_bids=true`,\n    )\n    return listings\n  } catch (error) {\n    console.error('Error fetching profile listings:', error)\n    return []\n  }\n}\n\n/**\n * Updates the profile data for a specified user.\n *\n * This function sends a PUT request to the auction API to update the profile data for the user identified by the provided `username`.\n * The `updatedData` object is sent in the request body, and the response is returned upon successful update.\n * If the request encounters an issue, an error is thrown.\n *\n * @param {string} username - The username of the user whose profile is to be updated.\n * @param {Object} updatedData - An object containing the updated profile information.\n * @returns {Promise<Object>} A promise that resolves to the updated profile data returned by the API.\n * @throws {Error} If the update operation encounters an issue.\n *\n * @example\n * const username = \"john_doe\";\n * const updatedData = { bio: \"New bio content\", avatar: \"new-avatar-url.jpg\" };\n * const updatedProfile = await updateProfileData(username, updatedData);\n * // Updates the profile data for 'john_doe' with the new bio and avatar.\n */\nexport async function updateProfileData(username, updatedData) {\n  try {\n    return await doFetch(`${API_AUCTION_PROFILE}/${username}`, {\n      method: 'PUT',\n      body: JSON.stringify(updatedData),\n    })\n  } catch (error) {\n    console.error('Error updating profile:', error)\n    throw error\n  }\n}\n\n/**\n * Fetches the winning bids for a specified user's profile.\n *\n * This function sends a request to the auction API to fetch the bidding history of the user identified by the provided `username`.\n * The response contains the list of bids that the user has won. If no wins are found or if an error occurs, an empty array is returned.\n *\n * @param {string} username - The username of the user whose winning bids are to be fetched.\n * @returns {Promise<Object[]>} A promise that resolves to an array of the user's winning bids, or an empty array if no wins are found or if an error occurs.\n * @throws {Error} If the fetch operation encounters an issue, an empty array is returned.\n *\n * @example\n * const username = \"john_doe\";\n * const wins = await fetchProfileWins(username);\n * // Fetches the winning bids for the user 'john_doe'.\n */\nexport async function fetchProfileWins(username) {\n  try {\n    const response = await doFetch(\n      `${API_AUCTION_PROFILE}/${username}/wins?_bids=true`,\n    )\n    if (!response || !Array.isArray(response)) {\n      console.error('No bidding history found')\n      return []\n    }\n\n    return response\n  } catch (error) {\n    console.error('Error fetching profile wins:', error)\n    return []\n  }\n}\n"],"names":["fetchProfileData","username","doFetch","API_AUCTION_PROFILE","error","fetchProfileListings","updateProfileData","updatedData","fetchProfileWins","response"],"mappings":"iDAkBO,eAAeA,EAAiBC,EAAU,CAC/C,GAAI,CAEF,OADoB,MAAMC,EAAQ,GAAGC,CAAmB,IAAIF,CAAQ,EAAE,CAEvE,OAAQG,EAAO,CACd,eAAQ,MAAM,+BAAgCA,CAAK,EAC5C,IACX,CACA,CAiBO,eAAeC,EAAqBJ,EAAU,CACnD,GAAI,CAIF,OAHiB,MAAMC,EACrB,GAAGC,CAAmB,IAAIF,CAAQ,sBACxC,CAEG,OAAQG,EAAO,CACd,eAAQ,MAAM,mCAAoCA,CAAK,EAChD,CAAA,CACX,CACA,CAoBO,eAAeE,EAAkBL,EAAUM,EAAa,CAC7D,GAAI,CACF,OAAO,MAAML,EAAQ,GAAGC,CAAmB,IAAIF,CAAQ,GAAI,CACzD,OAAQ,MACR,KAAM,KAAK,UAAUM,CAAW,CACjC,CAAA,CACF,OAAQH,EAAO,CACd,cAAQ,MAAM,0BAA2BA,CAAK,EACxCA,CACV,CACA,CAiBO,eAAeI,EAAiBP,EAAU,CAC/C,GAAI,CACF,MAAMQ,EAAW,MAAMP,EACrB,GAAGC,CAAmB,IAAIF,CAAQ,kBACxC,EACI,MAAI,CAACQ,GAAY,CAAC,MAAM,QAAQA,CAAQ,GACtC,QAAQ,MAAM,0BAA0B,EACjC,CAAA,GAGFA,CACR,OAAQL,EAAO,CACd,eAAQ,MAAM,+BAAgCA,CAAK,EAC5C,CAAA,CACX,CACA"}