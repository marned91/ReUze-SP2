{"version":3,"file":"listingsPerCategory-CsJwejZh.js","sources":["../../src/script/utils/filterActiveExpired.mjs","../../src/script/router/views/listingsPerCategory.mjs"],"sourcesContent":["/**\n * Sets up an event listener for the status filter dropdown and triggers a callback function when the selection changes.\n *\n * This function listens for changes to a status filter element (select dropdown with id `status-filter`) on the page.\n * When the user selects a different option, the provided callback function is called with the selected status value.\n * The status can be one of the following:\n * - \"all\" - No filter, shows all statuses.\n * - \"active\" - Filters for active statuses.\n * - \"expired\" - Filters for expired statuses.\n *\n * @param {Function} callback - A function to be called when the status filter selection changes.\n * The callback will receive the selected status value as its argument, which will be one of \"all\", \"active\", or \"expired\".\n *\n * @example\n * // Example usage:\n * setupStatusFilter((selectedStatus) => {\n *   if (selectedStatus === 'active') {\n *     // Show active items\n *   } else if (selectedStatus === 'expired') {\n *     // Show expired items\n *   } else {\n *     // Show all items\n *   }\n * });\n *\n * @returns {void} - This function does not return a value, it sets up an event listener.\n */\n\nexport function setupStatusFilter(callback) {\n  const statusFilter = document.getElementById('status-filter')\n  if (!statusFilter) return\n\n  statusFilter.addEventListener('change', (event) => {\n    const selectedStatus = event.target.value\n    callback(selectedStatus)\n  })\n}\n","import { fetchAllListingsByTag } from '../../api/listings.mjs'\nimport { setupStatusFilter } from '../../utils/filterActiveExpired.mjs'\nimport { handleAlert } from '../../global/handleAlerts.mjs'\nimport {\n  showSkeletonLoader,\n  hideSkeletonLoader,\n} from '../../utils/skeletonLoader.mjs'\n\n/**\n * Fetches and displays listings based on a status filter and selected tag.\n *\n * This function checks for a `tag` in the URL query parameters. If a tag is found, it will display the listings associated with that tag and update the page headline accordingly.\n * It fetches all listings for the given tag, filters them by the specified status (`'all'`, `'active'`, or `'expired'`), and dynamically creates HTML elements to display the listings in a grid.\n * If no listings are available for the tag or status filter, a message will be displayed:\n * \"No available listings for this category, please check again later!\"\n *\n * Available tags include:\n * - `'art'`\n * - `'fashion'`\n * - `'decor'`\n * - `'interior'`\n * - `'vintage'`\n * - `'sport'`\n * - `'other'`\n *\n * @param {string} [statusFilter='all'] - The status filter for displaying listings. Options are `'all'`, `'active'`, or `'expired'`. Defaults to `'all'`.\n * @returns {void}\n *\n * @example\n * displayListings('active');\n * // Displays all active listings.\n */\n\nasync function displayListings(statusFilter = 'all') {\n  const urlParams = new URLSearchParams(window.location.search)\n  const tag = urlParams.get('tag')\n\n  const headlineElement = document.getElementById('listings-headline')\n  if (tag) {\n    const formattedTag = tag.charAt(0).toUpperCase() + tag.slice(1)\n    headlineElement.textContent = `${formattedTag}`\n  }\n\n  const listingsContainer = document.getElementById('listings')\n  listingsContainer.innerHTML = ''\n\n  showSkeletonLoader()\n\n  try {\n    const listings = await fetchAllListingsByTag(tag)\n\n    if (!listings || !listings.length) {\n      const noListingsMessage = document.createElement('p')\n      noListingsMessage.textContent =\n        'No available listings for this category, please check again later!'\n      listingsContainer.appendChild(noListingsMessage)\n      return\n    }\n\n    const filteredListings = filterListingsByStatus(listings, statusFilter)\n\n    filteredListings.forEach((listing) => {\n      const listingElement = document.createElement('a')\n      listingElement.href = `/listings/view/index.html?id=${listing.id}`\n      listingElement.classList.add(\n        'border',\n        'p-4',\n        'shadow-2xl',\n        'bg-white',\n        'flex',\n        'flex-col',\n        'justify-between',\n        'min-h-[300px]',\n        'cursor-pointer',\n        'transition',\n        'duration-300',\n        'ease-out',\n        'hover:scale-105',\n        'rounded-lg',\n      )\n\n      const imageUrl =\n        listing.media && listing.media.length > 0\n          ? listing.media[0].url\n          : '/assets/default-listing-image.png'\n      const img = document.createElement('img')\n      img.src = imageUrl\n      img.alt = listing.title\n      img.classList.add('w-full', 'h-48', 'object-cover')\n\n      const title = document.createElement('h2')\n      title.textContent = listing.title\n      title.classList.add('font-mediumFont', 'text-xl', 'font-medium', 'mt-2')\n\n      const description = document.createElement('p')\n      description.textContent =\n        listing.description.slice(0, 100) + '...' || 'No description added.'\n      description.classList.add(\n        'font-smallFont',\n        'italic',\n        'text-sm',\n        'text-gray-600',\n        'mt-2',\n      )\n\n      const highestBid = listing.bids.length\n        ? Math.max(...listing.bids.map((bid) => bid.amount))\n        : 0\n      const highestBidElement = document.createElement('p')\n      highestBidElement.textContent = `Current Bid: $${highestBid}`\n      highestBidElement.classList.add('text-sm', 'font-bold', 'mt-1')\n\n      const deadline = new Date(listing.endsAt).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n      })\n      const deadlineElement = document.createElement('p')\n      deadlineElement.textContent = `Deadline: ${deadline}`\n      deadlineElement.classList.add('text-sm', 'mt-2')\n\n      const tagsDiv = document.createElement('div')\n      tagsDiv.classList.add('flex', 'flex-wrap', 'gap-1', 'mt-5', 'space-x-2')\n\n      if (listing.tags && listing.tags.length > 0) {\n        listing.tags.forEach((tag) => {\n          const tagElement = document.createElement('span')\n          tagElement.textContent = tag\n          tagElement.classList.add(\n            'rounded-full',\n            'bg-brand-dark',\n            'text-white',\n            'text-xs',\n            'px-3',\n            'py-1.5',\n          )\n          tagsDiv.appendChild(tagElement)\n        })\n      }\n\n      const currentDate = new Date()\n      const endAtDate = new Date(listing.endsAt)\n      const status = endAtDate > currentDate ? 'active' : 'expired'\n      const statusElement = document.createElement('span')\n      statusElement.textContent = status\n      statusElement.classList.add(\n        'rounded-full',\n        'text-white',\n        'text-xs',\n        'px-3',\n        'py-1.5',\n        status === 'active' ? 'bg-accent-dark' : 'bg-accent-light',\n      )\n      tagsDiv.appendChild(statusElement)\n\n      listingElement.appendChild(img)\n      listingElement.appendChild(title)\n      listingElement.appendChild(description)\n      listingElement.appendChild(deadlineElement)\n      listingElement.appendChild(highestBidElement)\n      listingElement.appendChild(tagsDiv)\n\n      listingsContainer.appendChild(listingElement)\n    })\n  } catch (error) {\n    handleAlert('Error fetching listings:', error, 'error')\n  } finally {\n    hideSkeletonLoader()\n  }\n}\n\n/**\n * Filters listings by their status based on the provided status filter.\n *\n * This function filters the listings array based on the status of each listing.\n * The status is determined by comparing the `endsAt` date of each listing with the current date.\n * Listings are classified as `'active'` if their `endsAt` date is in the future, and `'expired'` if the `endsAt` date is in the past.\n * The status filter can be set to `'all'` to include all listings, `'active'` to include only active listings, or `'expired'` to include only expired listings.\n *\n * @param {Array} listings - The array of listings to be filtered. Each listing should have an `endsAt` field representing the deadline date.\n * @param {string} statusFilter - The status filter. Can be `'all'`, `'active'`, or `'expired'`. Defaults to `'all'`.\n * @returns {Array} - A new array containing the filtered listings based on the specified status.\n *\n * @example\n * const activeListings = filterListingsByStatus(listings, 'active');\n * // Returns all active listings.\n */\nfunction filterListingsByStatus(listings, statusFilter) {\n  const currentDate = new Date()\n\n  return listings.filter((listing) => {\n    const endAtDate = new Date(listing.endsAt)\n    const status = endAtDate > currentDate ? 'active' : 'expired'\n\n    if (statusFilter === 'all') return true\n    return statusFilter === status\n  })\n}\n\nsetupStatusFilter(displayListings)\n\ndisplayListings()\n"],"names":["setupStatusFilter","callback","statusFilter","event","selectedStatus","displayListings","tag","headlineElement","formattedTag","listingsContainer","showSkeletonLoader","listings","fetchAllListingsByTag","noListingsMessage","filterListingsByStatus","listing","listingElement","imageUrl","img","title","description","highestBid","bid","highestBidElement","deadline","deadlineElement","tagsDiv","tagElement","currentDate","status","statusElement","error","handleAlert","hideSkeletonLoader"],"mappings":"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"}