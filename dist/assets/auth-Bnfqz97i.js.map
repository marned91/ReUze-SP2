{"version":3,"file":"auth-Bnfqz97i.js","sources":["../../src/script/api/auth.mjs"],"sourcesContent":["import { API_AUTH_LOGIN } from './constants.mjs'\nimport { API_AUTH_REGISTER } from './constants.mjs'\nimport { doFetch } from './doFetch.mjs'\n/**\n * Logs in a user with the provided email and password.\n *\n * This function sends a POST request to the login API, passing the user's email and password in the request body.\n * If the login is successful, the response containing an access token and user data is saved to localStorage.\n *\n * @param {Object} credentials - The login data.\n * @param {string} credentials.email - The user's email address.\n * @param {string} credentials.password - The user's password.\n * @returns {Promise<Object|null>} A promise that resolves to the user's login response or null if the request fails.\n * @throws {Error} If the login request encounters an issue.\n *\n * @example\n * const loginData = { email: \"user@example.com\", password: \"password123\" };\n * const userData = await login(loginData);\n */\n\nexport async function login({ email, password }) {\n  const body = JSON.stringify({ email, password })\n\n  const data = await doFetch(API_AUTH_LOGIN, {\n    method: 'POST',\n    body,\n    headers: { 'Content-Type': 'application/json' },\n  })\n\n  if (data) {\n    const { accessToken: token, ...user } = data\n    localStorage.setItem('token', token)\n    localStorage.setItem('user', JSON.stringify(user))\n  }\n\n  return data\n}\n\n/**\n * Registers a new user with the provided details.\n *\n * This function sends a POST request to the registration API with the user's name, email, password, and avatar details.\n *\n * @param {Object} userData - The user registration data.\n * @param {string} userData.name - The user's name.\n * @param {string} userData.email - The user's email address.\n * @param {string} userData.password - The user's password.\n * @param {Object} userData.avatar - The user's avatar information.\n * @param {string} userData.avatar.url - The URL of the user's avatar image.\n * @param {string} userData.avatar.alt - The alt text for the avatar image.\n * @returns {Promise<Object|null>} A promise that resolves to the registration response or null if the request fails.\n * @throws {Error} If the registration request encounters an issue.\n *\n * @example\n * const newUser = {\n *   name: \"John Doe\",\n *   email: \"johndoe@example.com\",\n *   password: \"securePassword123\",\n *   avatar: { url: \"https://example.com/avatar.jpg\", alt: \"John's avatar\" }\n * };\n * const response = await register(newUser);\n */\n\nexport async function register({ name, email, password, avatar }) {\n  const body = {\n    name,\n    email,\n    password,\n    avatar: { url: avatar.url, alt: avatar.alt },\n  }\n\n  return await doFetch(API_AUTH_REGISTER, {\n    method: 'POST',\n    body: JSON.stringify(body),\n  })\n}\n"],"names":["login","email","password","body","data","doFetch","API_AUTH_LOGIN","token","user","register","name","avatar","API_AUTH_REGISTER"],"mappings":"wDAoBO,eAAeA,EAAM,CAAE,MAAAC,EAAO,SAAAC,GAAY,CAC/C,MAAMC,EAAO,KAAK,UAAU,CAAE,MAAAF,EAAO,SAAAC,CAAU,CAAA,EAEzCE,EAAO,MAAMC,EAAQC,EAAgB,CACzC,OAAQ,OACR,KAAAH,EACA,QAAS,CAAE,eAAgB,kBAAoB,CAChD,CAAA,EAED,GAAIC,EAAM,CACR,KAAM,CAAE,YAAaG,EAAO,GAAGC,CAAI,EAAKJ,EACxC,aAAa,QAAQ,QAASG,CAAK,EACnC,aAAa,QAAQ,OAAQ,KAAK,UAAUC,CAAI,CAAC,CACrD,CAEE,OAAOJ,CACT,CA2BO,eAAeK,EAAS,CAAE,KAAAC,EAAM,MAAAT,EAAO,SAAAC,EAAU,OAAAS,CAAM,EAAI,CAChE,MAAMR,EAAO,CACX,KAAAO,EACA,MAAAT,EACA,SAAAC,EACA,OAAQ,CAAE,IAAKS,EAAO,IAAK,IAAKA,EAAO,GAAK,CAChD,EAEE,OAAO,MAAMN,EAAQO,EAAmB,CACtC,OAAQ,OACR,KAAM,KAAK,UAAUT,CAAI,CAC1B,CAAA,CACH"}