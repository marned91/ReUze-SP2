{"version":3,"file":"listings-CovSnx_b.js","sources":["../../src/script/api/listings.mjs"],"sourcesContent":["import { API_AUCTION } from './constants.mjs'\nimport { doFetch } from './doFetch.mjs'\nimport { handleAlert } from '../global/handleAlerts.mjs'\n\n/**\n * Fetches all auction listings filtered by a specified tag.\n *\n * This function sends a request to the auction API, fetching listings that either match the provided tag or fall under the 'other' category.\n * If the 'other' tag is selected, it filters out specific tags (art, fashion, sport, vintage, interior, decor) from the listings.\n * The response is sorted by the creation date in descending order.\n *\n * @param {string} tag - The tag used to filter the listings.\n * @param {number} [page=1] - The page number to fetch (default is 1).\n * @param {number} [limit=50] - The number of listings to fetch per page (default is 50).\n * @returns {Promise<Object[]>} A promise that resolves to an array of auction listings sorted by creation date in descending order.\n * @throws {Error} If the fetch operation encounters an issue.\n *\n * @example\n * const tag = \"art\";\n * const listings = await fetchAllListingsByTag(tag);\n * // Use the fetched and sorted auction listings here\n */\nexport async function fetchAllListingsByTag(tag, page = 1, limit = 50) {\n  let url = `${API_AUCTION}/?_bids=true&limit=${limit}&page=${page}&sort=created&sortOrder=desc`\n\n  if (tag) {\n    if (tag === 'other') {\n      const allListings = await doFetch(url)\n      const latestListings = allListings\n        .filter(\n          (listing) =>\n            listing.tags &&\n            listing.tags.length > 0 &&\n            !['art', 'fashion', 'sport', 'vintage', 'interior', 'decor'].some(\n              (excludedTag) => listing.tags.includes(excludedTag),\n            ),\n        )\n        .sort((a, b) => new Date(b.created) - new Date(a.created))\n      return latestListings.slice(0, 50)\n    } else\n      url = `${API_AUCTION}/?_tag=${encodeURIComponent(tag)}&_bids=true&limit=${limit}&page=${page}&sort=created&sortOrder=desc`\n  }\n  const listings = await doFetch(url)\n\n  return listings.sort((a, b) => new Date(b.created) - new Date(a.created))\n}\n\n/**\n * Fetches a single auction listing based on the listing ID from the URL.\n *\n * This function extracts the listing ID from the current page's URL query string and sends a request to the auction API to fetch the details of that listing. The listing's bids are also included in the response.\n * If no listing ID is found in the URL, an error message is logged to the console, and the function returns `null`.\n *\n * @returns {Promise<Object|null>} A promise that resolves to the auction listing object if found, or `null` if no listing ID is present in the URL or if the request fails.\n * @throws {Error} If the fetch operation encounters an issue.\n *\n * @example\n * const listing = await fetchSingleListing();\n * if (listing) {\n *   // Use the listing details here\n * } else {\n *   // Handle the case when no listing is found\n * }\n */\nexport async function fetchSingleListing() {\n  const urlParams = new URLSearchParams(window.location.search)\n  const listingId = urlParams.get('id')\n\n  if (!listingId) {\n    console.error('No listing ID found in URL.')\n    return null\n  }\n\n  const response = await doFetch(`${API_AUCTION}/${listingId}?_bids=true`)\n\n  return response || null\n}\n\n/**\n * Creates a new auction listing by sending the provided data to the auction API.\n *\n * This function sends a POST request to the auction API with the provided `listingData` in the request body.\n * If the server responds with no content, an error is thrown. Upon a successful response, the function returns the response data.\n *\n * @param {Object} listingData - The data for the new auction listing. The shape of this object should match the expected input for the API.\n * @returns {Promise<Object>} A promise that resolves to the API response for the created listing.\n * @throws {Error} If the creation process encounters an issue, or if the API returns no content.\n *\n * @example\n * const listingData = { title: \"Vintage Art Piece\", description: \"A beautiful vintage painting.\", startingPrice: 100 };\n * const createdListing = await createListing(listingData);\n * // The created listing's response data is now available in createdListing\n */\nexport async function createListing(listingData) {\n  try {\n    const response = await doFetch(API_AUCTION, {\n      method: 'POST',\n      body: JSON.stringify(listingData),\n    })\n\n    if (response === null) {\n      throw new Error('No content received from the server')\n    }\n\n    return response\n  } catch (error) {\n    console.error('Error creating listing:', error)\n    throw error\n  }\n}\n\n/**\n * Fetches auction listings based on the provided search query.\n *\n * This function sends a search request to the auction API using the provided `query`. It filters the listings by checking if the query matches either the title or description, and sorts the results based on title matches.\n *\n * @param {string} query - The search query used to filter the listings.\n * @returns {Promise<Object[]>} A promise that resolves to an array of sorted auction listings that match the search query.\n * @throws {Error} If the fetch operation encounters an issue, an empty array will be returned.\n *\n * @example\n * const query = \"vintage art\";\n * const listings = await fetchListingsBySearch(query);\n * // Logs the filtered and sorted auction listings matching the search query.\n */\nexport async function fetchListingsBySearch(query) {\n  try {\n    const response = await doFetch(\n      `${API_AUCTION}/search?q=${query}&_bids=true`,\n    )\n\n    const listings = Array.isArray(response) ? response : response?.data || []\n\n    const filteredListings = listings.filter((listing) => {\n      const lowerQuery = query.toLowerCase()\n      return (\n        listing.title.toLowerCase().includes(lowerQuery) ||\n        listing.description.toLowerCase().includes(lowerQuery)\n      )\n    })\n\n    const sortedListings = filteredListings.sort((a, b) => {\n      const aTitleMatch = a.title.toLowerCase().includes(query.toLowerCase())\n      const bTitleMatch = b.title.toLowerCase().includes(query.toLowerCase())\n\n      if (aTitleMatch && !bTitleMatch) return -1\n      if (!aTitleMatch && bTitleMatch) return 1\n\n      return 0\n    })\n\n    return sortedListings\n  } catch (error) {\n    console.error('Error fetching listings:', error)\n    return []\n  }\n}\n\n/**\n * Deletes an auction listing by its ID.\n *\n * This function sends a DELETE request to the auction API to delete the listing with the specified `id`.\n * If the deletion is successful, a success message is displayed, and the user is redirected to the profile page.\n * If the deletion fails, an error message is shown to the user.\n *\n * @param {string} id - The ID of the listing to be deleted.\n * @returns {Promise<void>} A promise that resolves once the deletion process is complete.\n * @throws {Error} If the deletion request encounters an issue, an error message is shown to the user.\n *\n * @example\n * const listingId = \"12345\";\n * await deleteListing(listingId);\n * // Deletes the listing with ID '12345' and handles the response.\n */\nexport async function deleteListing(id) {\n  const DELETE_LISTING_API = `${API_AUCTION}/${id}`\n\n  try {\n    const response = await doFetch(DELETE_LISTING_API, { method: 'DELETE' })\n    if (response === null) {\n      handleAlert('Listing deleted successfully!', 'success')\n      setTimeout(() => (window.location.pathname = /profile/), 2000)\n    } else {\n      throw new Error('Failed to delete the listing')\n    }\n  } catch (error) {\n    console.error(error)\n    handleAlert(\n      'An error occurred while deleting the listing. Please try again.',\n      'error',\n    )\n  }\n}\n"],"names":["fetchAllListingsByTag","tag","page","limit","url","API_AUCTION","doFetch","listing","excludedTag","a","b","fetchSingleListing","listingId","createListing","listingData","response","error","fetchListingsBySearch","query","lowerQuery","aTitleMatch","bTitleMatch","deleteListing","id","DELETE_LISTING_API","handleAlert"],"mappings":"wFAsBO,eAAeA,EAAsBC,EAAKC,EAAO,EAAGC,EAAQ,GAAI,CACrE,IAAIC,EAAM,GAAGC,CAAW,sBAAsBF,CAAK,SAASD,CAAI,+BAEhE,GAAID,EAAK,CACP,GAAIA,IAAQ,QAYV,OAXoB,MAAMK,EAAQF,CAAG,GAElC,OACEG,GACCA,EAAQ,MACRA,EAAQ,KAAK,OAAS,GACtB,CAAC,CAAC,MAAO,UAAW,QAAS,UAAW,WAAY,OAAO,EAAE,KAC1DC,GAAgBD,EAAQ,KAAK,SAASC,CAAW,CACnD,CACb,EACS,KAAK,CAACC,EAAGC,IAAM,IAAI,KAAKA,EAAE,OAAO,EAAI,IAAI,KAAKD,EAAE,OAAO,CAAC,EACrC,MAAM,EAAG,EAAE,EAEjCL,EAAM,GAAGC,CAAW,UAAU,mBAAmBJ,CAAG,CAAC,qBAAqBE,CAAK,SAASD,CAAI,8BAClG,CAGE,OAFiB,MAAMI,EAAQF,CAAG,GAElB,KAAK,CAACK,EAAGC,IAAM,IAAI,KAAKA,EAAE,OAAO,EAAI,IAAI,KAAKD,EAAE,OAAO,CAAC,CAC1E,CAmBO,eAAeE,GAAqB,CAEzC,MAAMC,EADY,IAAI,gBAAgB,OAAO,SAAS,MAAM,EAChC,IAAI,IAAI,EAEpC,OAAKA,EAKY,MAAMN,EAAQ,GAAGD,CAAW,IAAIO,CAAS,aAAa,GAEpD,MANjB,QAAQ,MAAM,6BAA6B,EACpC,KAMX,CAiBO,eAAeC,EAAcC,EAAa,CAC/C,GAAI,CACF,MAAMC,EAAW,MAAMT,EAAQD,EAAa,CAC1C,OAAQ,OACR,KAAM,KAAK,UAAUS,CAAW,CACjC,CAAA,EAED,GAAIC,IAAa,KACf,MAAM,IAAI,MAAM,qCAAqC,EAGvD,OAAOA,CACR,OAAQC,EAAO,CACd,cAAQ,MAAM,0BAA2BA,CAAK,EACxCA,CACV,CACA,CAgBO,eAAeC,EAAsBC,EAAO,CACjD,GAAI,CACF,MAAMH,EAAW,MAAMT,EACrB,GAAGD,CAAW,aAAaa,CAAK,aACtC,EAsBI,OApBiB,MAAM,QAAQH,CAAQ,EAAIA,EAAWA,GAAU,MAAQ,CAAA,GAEtC,OAAQR,GAAY,CACpD,MAAMY,EAAaD,EAAM,YAAW,EACpC,OACEX,EAAQ,MAAM,cAAc,SAASY,CAAU,GAC/CZ,EAAQ,YAAY,YAAa,EAAC,SAASY,CAAU,CAExD,CAAA,EAEuC,KAAK,CAACV,EAAGC,IAAM,CACrD,MAAMU,EAAcX,EAAE,MAAM,YAAW,EAAG,SAASS,EAAM,YAAa,CAAA,EAChEG,EAAcX,EAAE,MAAM,YAAW,EAAG,SAASQ,EAAM,YAAa,CAAA,EAEtE,OAAIE,GAAe,CAACC,EAAoB,GACpC,CAACD,GAAeC,EAAoB,EAEjC,CACR,CAAA,CAGF,OAAQL,EAAO,CACd,eAAQ,MAAM,2BAA4BA,CAAK,EACxC,CAAA,CACX,CACA,CAkBO,eAAeM,EAAcC,EAAI,CACtC,MAAMC,EAAqB,GAAGnB,CAAW,IAAIkB,CAAE,GAE/C,GAAI,CAEF,GADiB,MAAMjB,EAAQkB,EAAoB,CAAE,OAAQ,QAAU,CAAA,IACtD,KACfC,EAAY,gCAAiC,SAAS,EACtD,WAAW,IAAO,OAAO,SAAS,SAAW,UAAY,GAAI,MAE7D,OAAM,IAAI,MAAM,8BAA8B,CAEjD,OAAQT,EAAO,CACd,QAAQ,MAAMA,CAAK,EACnBS,EACE,kEACA,OACN,CACA,CACA"}